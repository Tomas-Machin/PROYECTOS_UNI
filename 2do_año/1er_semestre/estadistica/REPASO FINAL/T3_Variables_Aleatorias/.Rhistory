eje_x = seq(0, 10, by = 0.01)
plot(eje_x, f_x(eje_x))
source("~/.active-rstudio-document", echo=TRUE)
plot(eje_x, f_x(eje_x), type = "l")
plot(eje_x, f_x(eje_x))
source("~/.active-rstudio-document", echo=TRUE)
f_x_given_5 = function(y){
f(5, y) / f_x(5)
}
f_x_given_5 = Vectorize(f_x_given_5)
f_y_given_5 = function(y){
f(5, y) / f_x(5)
}
f_y_given_5 = Vectorize(f_y_given_5)
f_y_given_5 = function(y){
f(5, y) / f_x(5)
}
f_y_given_5 = Vectorize(f_y_given_5)
eje_y = seq(0, 10, by = 0.1)
plot(eje_y,(f_y_given_5(eje_y)))
plot(eje_y,(f_y_given_5(eje_y)), type = "l")
eje_y = seq(5, 10, by = 0.1)
plot(eje_y,(f_y_given_5(eje_y)), type = "l")
source("~/.active-rstudio-document", echo=TRUE)
# P(5 < Y < 7 | X = 5)
sum(f_y_given_5(eje_y))
f_y_given_5(eje_y)
# P(5 < Y < 7 | X = 5)
sum(f_y_given_5(eje_y)) / rowSums(eje_y)
rowSums(eje_y)
# P(5 < Y < 7 | X = 5)
sum(f_y_given_5(eje_y)) / colSums(eje_y)
# P(5 < Y < 7 | X = 5)
sum(f_y_given_5(eje_y)) / sum(eje_y)
sum(eje_y)
# P(5 < Y < 7 | X = 5)
integrate(f_y_given_5, 4, 7)
f_y_given_5 = function(y){
f(5, y) / f_x(5)
}
f_y_given_5 = Vectorize(f_y_given_5)
eje_y = seq(0, 10, by = 0.1)
plot(eje_y,(f_y_given_5(eje_y)), type = "l")  # y > 5 para q la prob no sea nula
# P(5 < Y < 7 | X = 5)
integrate(f_y_given_5, 4, 7)
source("~/.active-rstudio-document", echo=TRUE)
y
sum(f(5, 4:7) / f_x(5))
sum(f(5, 4:7) / f_x(5)) / 4
integrate(f_x, 0, Inf)
f_x = function(xv){
# f(x, y)
integrate(f, xv + 3, Inf, x = xv)$value
# exp(-xv - 3)  --->  como un paso mas corto: wolframalpha del (A.-) y sale eso
}
f_x = Vectorize(f_x)
integrate(f_y_given_5, 4, 7)
f_x = function(xv){
# f(x, y)
integrate(f, xv + 3, Inf, x = xv)$value
# exp(-xv - 3)  --->  como un paso mas corto: wolframalpha del (A.-) y sale eso
}
f_y_given_5 = function(y){
f(5, y) / f_x(5)
}
f_y_given_5 = Vectorize(f_y_given_5)
eje_y = seq(0, 10, by = 0.1)
plot(eje_y,(f_y_given_5(eje_y)), type = "l")
integrate(f_y_given_5, 4, 7)  # 17.36745 with absolute error < 0.00086
f_y_given_5 = function(y){
f(5, y) / f_x(5)
}
f_y_given_5 = Vectorize(f_y_given_5)
eje_y = seq(0, 10, by = 0.1)
plot(eje_y,(f_y_given_5(eje_y)), type = "l")  # y > 5 para q la prob no sea nula
# P(4 < Y < 7 | X = 5)
f_x = function(xv){
# f(x, y)
integrate(f, xv, Inf, x = xv)$value
# exp(-xv - 3)  --->  como un paso mas corto: wolframalpha del (A.-) y sale eso
}
f_x = Vectorize(f_x)
integrate(f_y_given_5, 4, 7)
integrate(f_x, 0, Inf)
integrate(
function(y) y * f_y_given_5(y),
5,
Inf
)
?dbinom
dbinom(100, 0.5)
dbinom(10, 100, 0.5)
dbinom(50, 100, 0.5)
dbinom(100, 100, 0.5)
plot(dbinom(100, 100, 0.5))
n = 1:100
plot(dbinom(n, 100, 0.5))
n = 1:100
plot(dbinom(n, 100, 0.5))
source("C:/Users/machi/Downloads/CEU/segundo año/primer semestre/estadistica/REPASO FINAL/Varaibles_Aleatorias/Apuntes_VA.R", echo=TRUE)
dbinom(50, 100, 0.5)
pbinom(50, 100, 0.5)
qbinom(50, 100, 0.5)
rbinom(50, 100, 0.5)
rbinom(50, 50, 0.5)
sum(rbinom(50, 100, 0.5)) / 50
nbinom
?nbinom
?binom
?Binomial
choose(15 + 10 - 1, 15 - 1) * 0.7 ^ 15 * 0.3 * 10
1 - pbinom(10, 15, 0.7)
?pnbinom()
1 - pnbimon(5, 10, 0.7)
pnbimon(5, 10, 0.7)
pnbinom(5, 10, 0.7)
1 - pnbinom(5, 10, 0.7)
# B(2000, P(X >= 1)) = 1 - P(X = 0)
1 - dbinom(0, 4, 0.5)
E_y = 2000 * 0.9375
E_y
?rbimon()
?rbinom()
# P(X = 2) por simulaciones:
rbinom(1, 4, 0.5)
# P(X = 2) por simulaciones:
rbinom(100, 4, 0.5)
# P(X = 2) por simulaciones:
rbinom(1, 4, 0.5)
# P(X = 2) por simulaciones:
rbinom(1, 4, 0.5)
# P(X = 2) por simulaciones:
rbinom(1, 4, 0.5)
# P(X = 2) por simulaciones:
rbinom(1, 4, 0.5)
# P(X = 2) por simulaciones:
rbinom(1, 4, 0.5)
# P(X = 2) por simulaciones:
rbinom(1, 4, 0.5)
# P(X = 2) por simulaciones:
rbinom(1, 4, 0.5)
# P(X = 2) por simulaciones:
n_girls = rbinom(1, 4, 0.5)
n_girls == 2
n_girls = rbinom(1, 4, 0.5)
n_girls == 2
n_girls = rbinom(1, 4, 0.5)
n_girls == 2
n_girls = rbinom(1, 4, 0.5)
n_girls == 2
n_girls = rbinom(1, 4, 0.5)
n_girls == 2
n_girls = rbinom(1, 4, 0.5)
n_girls == 2
n_girls = rbinom(100, 4, 0.5)
n_girls == 2
sum(n_girls == 2) / 100
n_girls = rbinom(100, 4, 0.5)
sum(n_girls == 2) / 100
n_girls = rbinom(100, 4, 0.5)
sum(n_girls == 2) / 100
n_girls = rbinom(100, 4, 0.5)
sum(n_girls == 2) / 100
n_girls = rbinom(100, 4, 0.5)
sum(n_girls == 2) / 100
n_girls = rbinom(100, 4, 0.5)
sum(n_girls == 2) / 100
n_girls = rbinom(100, 4, 0.5)
sum(n_girls == 2) / 100
n_girls = rbinom(5000, 4, 0.5)
sum(n_girls == 2) / 5000
n_girls = rbinom(5000, 4, 0.5)
sum(n_girls == 2) / 5000
n_girls = rbinom(5000, 4, 0.5)
sum(n_girls == 2) / 5000
# P(X = 2) por simulaciones:
N = 5000
n_girls = rbinom(N, 4, 0.5)
sum(n_girls == 2) / N  # --> 0.3968
N = 5000
n_girls = rbinom(N, 4, 0.5)
sum(n_girls == 2) / N  # --> 0.3968
p_success = sum(n_girls == 2) / N  # --> 0.3968
rbinom(1, 2000, p_success)
# problema de la esperanza por simulaciones:
# E[Y]
rbinom(N, 2000, p_success)  # --> 769
# problema de la esperanza por simulaciones:
# E[Y]
mean(
rbinom(N, 2000, p_success)  # --> 769
)
N = 5000
n_girls = rbinom(N, 4, 0.5)
p_success = sum(n_girls == 2) / N  # --> 0.3968
# problema de la esperanza por simulaciones:
# E[Y]
mean(
rbinom(N, 2000, p_success)
)
N = 5000
n_girls = rbinom(N, 4, 0.5)
p_success = sum(n_girls == 2) / N  # --> 0.3968
# problema de la esperanza por simulaciones:
# E[Y]
mean(
rbinom(N, 2000, p_success)
)
N = 5000
n_girls = rbinom(N, 4, 0.5)
p_success = sum(n_girls == 2) / N  # --> 0.3968
# problema de la esperanza por simulaciones:
# E[Y]
mean(
rbinom(N, 2000, p_success)
)
N = 5000
n_girls = rbinom(N, 4, 0.5)
p_success = sum(n_girls == 2) / N  # --> 0.3968
# problema de la esperanza por simulaciones:
# E[Y]
mean(
rbinom(N, 2000, p_success)
)
N = 5000
n_girls = rbinom(N, 4, 0.5)
p_success = sum(n_girls == 2) / N  # --> 0.3968
# problema de la esperanza por simulaciones:
# E[Y]
mean(
rbinom(N, 2000, p_success)
)
N = 5000
n_girls = rbinom(N, 4, 0.5)
p_success = sum(n_girls == 2) / N  # --> 0.3968
# problema de la esperanza por simulaciones:
# E[Y]
mean(
rbinom(N, 2000, p_success)
)
N = 5000
n_girls = rbinom(N, 4, 0.5)
p_success = sum(n_girls == 2) / N  # --> 0.3968
# problema de la esperanza por simulaciones:
# E[Y]
mean(
rbinom(N, 2000, p_success)
)
N = 5000
n_girls = rbinom(N, 4, 0.5)
p_success = sum(n_girls == 2) / N  # --> 0.3968
# problema de la esperanza por simulaciones:
# E[Y]
mean(
rbinom(N, 2000, p_success)
)
100 - 100 * .12
100 * .12
1 - pbinom(100, 110, 0.88)
1 - pbinom(100, 110, 0.88) # --> 0.1366599
# X ~ B(n?, 0.88)
# P(X > 100) <= 0..05
(1 - pbinom(1:100, 110, 0.88)) <= 0.05
# X ~ B(n?, 0.88)
# P(X > 100) <= 0..05
(1 - pbinom(100:200, 110, 0.88)) <= 0.05
# X ~ B(n?, 0.88)
# P(X > 100) <= 0..05
(1 - pbinom(102, 110, 0.88)) <= 0.05
# X ~ B(n?, 0.88)
# P(X > 100) <= 0..05
(1 - pbinom(101, 110, 0.88)) <= 0.05
# X ~ B(n?, 0.88)
# P(X > 100) <= 0..05
(1 - pbinom(102, 110, 0.88)) <= 0.05
# X ~ B(n?, 0.88)
# P(X > 100) <= 0..05
(1 - pbinom(100, 1:110, 0.88)) <= 0.05
# X ~ B(n?, 0.88)
# P(X > 100) <= 0..05
sum((1 - pbinom(100, 1:110, 0.88)) <= 0.05)
n = 1:110
vector = 1 - pbinom(100, n, 0.88) <= 0.05
solucion = sum(vector)
solucion
source("C:/Users/machi/Downloads/CEU/segundo año/primer semestre/estadistica/REPASO FINAL/Varaibles_Aleatorias/Apuntes_VA.R")
?dpois
# X ~ nº de ataques en un dia
# X ~ P(λ)
# λ = nº de ataques sufridos / 100 dias =  1 * 35 + 2 * 15 + 3 * 5 / 100
λ = 1 * 35 + 2 * 15 + 3 * 5 / 100
λ
1 * 35 + 2 * 15 + 3 * 5
1 * 35 + 2 * 15 + 3 * 5 / 100
(1 * 35 + 2 * 15 + 3 * 5) / 100
plot(xs, dpois(xs, λ))
plot(xs, dpois(xs, λ), type = "l")
plot(xs, dpois(xs, λ))
xs = 0:1 # por ejemplo
plot(xs, dpois(xs, λ))
xs = 0:100 # por ejemplo
plot(xs, dpois(xs, λ))
xs = 0:5000 # por ejemplo
plot(xs, dpois(xs, λ))
xs = 0:500 # por ejemplo
plot(xs, dpois(xs, λ))
xs = 0:250 # por ejemplo
plot(xs, dpois(xs, λ))
xs = 0:150 # por ejemplo
plot(xs, dpois(xs, λ))
xs = 0:100 # por ejemplo
plot(xs, dpois(xs, λ))
1 - dpois(0, 0.8)
source("~/.active-rstudio-document", echo=TRUE)
p_xy = function(x, y){
dnbimon(x , 10, 0.5) * dhyper(y , 10, x, 5)
}
probs_ xy = outer(x_s, y_s, p_xy)
probs_xy = outer(x_s, y_s, p_xy)
x_s = 0:100  # 0:Inf en un principio pero con Inf no se hace
y_s = 0:5 # pq solo puedes sacar hasta 5 bolas blancas
probs_xy = outer(x_s, y_s, p_xy)
# 1.- calcular la distr. conjunta P(X, Y)
# P(Y, X) = P(Y | X) *  P(X)
p_xy = function(x, y){
dnbinom(x , 10, 0.5) * dhyper(y , 10, x, 5)
}
x_s = 0:100  # 0:Inf en un principio pero con Inf no se hace
y_s = 0:5 # pq solo puedes sacar hasta 5 bolas blancas
probs_xy = outer(x_s, y_s, p_xy)
probs_xy
p_xy = function(x, y){
dnbinom(x , 10, 0.5) * dhyper(y , 10, x, 5)
}
x_s = 0:100  # 0:Inf en un principio pero con Inf no se hace
y_s = 0:5 # pq solo puedes sacar hasta 5 bolas blancas
probs_xy = outer(x_s, y_s, p_xy)
probs_xy
probs_xy = outer(y_s, x_s, p_xy)
probs_xy
probs_xy = outer(x_s, y_s, p_xy)
probs_xy
dim(probs_xy)
probs_xy = outer(x_s, y_s, p_xy)
probs_xy
dim(probs_xy)
probs_xy = outer(x_s, y_s, p_xy)
colnames(probs_xy) = paste("P(Y =", y_s, ")")
rownames(probs_xy) = paste("P(X =", x_s, ")")
probs_xy
colnames(probs_xy) = paste("P( Y =", y_s, ")")
rownames(probs_xy) = paste("P( X =", x_s, ")")
probs_xy
colnames(probs_xy) = paste("P( Y =", y_s, ")")
rownames(probs_xy) = paste("X =", x_s)
# 2.- marginalizar X para hayar P(Y): P(Y = y) = P(X = x, Y = y)
pb_y = colSums(probs_xy)
pb_y
sum(pb_y)
plot(y_s, pb_y, type = "l")
plot(y_s, pb_y, type = "h")
# P(X > 5) --> 1 - P(X <= 5) --> 1 - F(5)
1 - pnorm(5, 4.5, 0.03)
# P(X > 5) --> 1 - P(X <= 5) --> 1 - F(5)
1 - pnorm(5, 4.5, 0.03)
pnorm(5, 4.5, 0.03)
sqrt(3) * 0.1
# P(X > 5) --> 1 - P(X <= 5) --> 1 - F(5)
1 - pnorm(5, 4.5, sqrt(3) * 1)  # --> 0
pnorm(5, 4.5, sqrt(3) * 1)
# P(X > 5) --> 1 - P(X <= 5) --> 1 - F(5)
1 - pnorm(5, 4.5, sqrt(3) * 0.1)  # --> 0.386415
# asumimos q las variables son independientes entre si
x = rnorm(1, mean = 0, sd = 5)
# asumimos q las variables son independientes entre si
x = rnorm(1, mean = 0, sd = 5)
y = rnorm(1, mean = 0, sd = 5)
c(x, y)
d = sqrt(x ^ 2 + y ^ 2)
d
x = rnorm(1, mean = 0, sd = 5)
y = rnorm(1, mean = 0, sd = 5)
d = sqrt(x ^ 2 + y ^ 2)
d
x = rnorm(1, mean = 0, sd = 5)
y = rnorm(1, mean = 0, sd = 5)
d = sqrt(x ^ 2 + y ^ 2)
d
d < 1
# asumimos q las variables son independientes entre si
N = 5000
x = rnorm(N, mean = 0, sd = 5)
y = rnorm(N, mean = 0, sd = 5)
d = sqrt(x ^ 2 + y ^ 2)
sum(d < 1) / N
?dmultinom
?dunif
f = function(x, y, a, r, m){
# f(a, r, m | x, y) = f(x, y, a, r, m) / f(x, y) -->
# --> f(x, y, a, r, m) = f(a, r, m | x, y) * f(x, y)
# f(x, y) = f(x) * f(y)
pa = (2 * x - y + 1) / 6
pr =  (3 * y - 2 * x + 2) / 10
pm = (1 - pa - pr)
prob = c(pa, pr, pm)
# dmultinom(a, r, m, ...) * dunif(x, ...) * dunif(y, ...)
dmultinom(c(a, r, m), 20, prob) * dunif(x) * dunif(y) # dunif tiene por defecto (0, 1)
}
f = function(x, y, a, r, m){
# f(a, r, m | x, y) = f(x, y, a, r, m) / f(x, y) -->
# --> f(x, y, a, r, m) = f(a, r, m | x, y) * f(x, y)
# f(x, y) = f(x) * f(y)
p_a = (2 * x - y + 1) / 6
p_r =  (3 * y - 2 * x + 2) / 10
p_m = (1 - pa - pr)
prob = c(p_a, p_r, p_m)
# dmultinom(a, r, m, ...) * dunif(x, ...) * dunif(y, ...)
dmultinom(c(a, r, m), 20, prob) * dunif(x) * dunif(y) # dunif tiene por defecto (0, 1)
}
f_xy_given_pelis = function(x, y){
# f(x, y | a, r, m) = f(x, y, a, r, m) / f(a, r, m)
f(x, y, 4, 4, 12)
}
?dgeom
# con numeritos para empezar entendiendo
# a = 4, b = 5
# P(X3 = 6)
# REPRESENTACION?
# _ _ _ _ _ _ _ _ _   blancas = 1, negras = 0 --> importa el orden (primera a en 4º)
#                                             --> permitimos repeticion
# PROBLEMA DE MISSISSIPPI
casos_totales = factorial(9) / (factorial(4) * factorial(5))
casos_totales
choose(5, 2)
choose(5, 3)
# P(X3 = 6) --> tercera blanca en la posicion 6
# 1.- rellenar parte del vector con algunas restricciones
# _ _ _ _ _ B _ _ _
# (2a - 3b)  (1a - 2b)
# 2.- relleno la 1º parte con las restricciones --> choose(5, 2)
casos_favorables = choose(5, 2) + choose(3, 1)
casos_favorables
# 3.- definir la parte final
# poner 3 volas en fila con rep - MISSISSIPPI
factorial(3) / (factorial(2) * factorial(1))
source("~/.active-rstudio-document", echo=TRUE)
# 2.- relleno la 1º parte con las restricciones
# poner 5 bolas en fila con rep - MISSISSIPPI
factorial(5) / (factorial(3) * factorial(2))
# 2.- relleno la 1º parte con las restricciones
# poner 5 bolas en fila con rep - MISSISSIPPI
parte_1 = factorial(5) / (factorial(3) * factorial(2)) # --> choose(5, 2)
# 3.- definir la parte final
# poner 3 volas en fila con rep - MISSISSIPPI
parte_2 = factorial(3) / (factorial(2) * factorial(1)) # --> choose(3, 2)
casos_favorables = parte_1 * àrte_2
casos_favorables = parte_1 * parte_2
casos_favorables
P_X = casos_favorables / casos_totales
P_X
f = function(x, y){
x * y / 96
}
integrate2_dydx(
f,
from_x = 0, to_x = 2,
from_y = function(x) 1, to_y = function(x) x - 3
)
f = function(x, y){
x * y / 96
}
sol = integrate2_dydx(
f,
from_x = 0, to_x = 2,
from_y = function(x) 1, to_y = function(x) x - 3
)
sol$value
source("~/.active-rstudio-document", echo=TRUE)
fc = function(x, y){
exp(-2 * x) * exp(-3 * y)
}
# c = 1 / funcion fc
c = 1 / fc
integrate2_dydx(   # funcion en utils.R
fc,
from_x = 0, to_x = Inf,
from_y = function(x) 0, to_y = function(x) Inf    # mejor escribirlo en funcion de una sola variable
)
c = 1 / casi_cte$value
c
fc = function(x, y){
exp(-2 * x) * exp(-3 * y)
}
# c = 1 / funcion fc
casi_cte = integrate2_dydx(   # funcion en utils.R
fc,
from_x = 0, to_x = Inf,
from_y = function(x) 0, to_y = function(x) Inf    # mejor escribirlo en funcion de una sola variable
)
c = 1 / casi_cte$value
c
fc = function(x, y){
exp(-2 * x) * exp(-3 * y)
}
# c = 1 / funcion fc
casi_cte = integrate2_dydx(   # funcion en utils.R
fc,
from_x = 0, to_x = Inf,
from_y = function(x) 0, to_y = function(x) Inf    # mejor escribirlo en funcion de una sola variable
)
c = 1 / casi_cte$value
c
