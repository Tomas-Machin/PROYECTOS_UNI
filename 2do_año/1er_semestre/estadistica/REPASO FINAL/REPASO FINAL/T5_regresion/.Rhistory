summary(frog_model)
# 2.- INFORMACION ESTADISTICA DEL MODELO
summary(my_lm) # --> estimar como de seguro esta acerca de sus predicciones
# 3) Inferencia
summary(frog_model)
confint(frog_model)
# 1) crear un modelo lineal
naive_model = lm(data_y ~ data_x, data = df)
# 2) obtener estimaciones de a y b
summary(naive_model)
# 3) Obtener predicciones del modelo lineal
preds = predict(naive_model, interval = "confidence")
# 4) visualizar el ajuste
data_and_preds = bind_cols(df, preds)
ggplot(data_and_preds, aes(x = data_x)) +
geom_point(aes(y = data_y)) +
geom_line(aes(y = expected, col = "Expected")) +
geom_line(aes(y = fit, col = "Predicted")) +
geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.2, fill = "black")
# 1) crear un modelo lineal
naive_model = lm(data_y ~ data_x, data = df)
# 2) obtener estimaciones de a y b
summary(naive_model)
# 3) Obtener predicciones del modelo lineal
preds = predict(naive_model, interval = "confidence")
# 4) visualizar el ajuste
data_and_preds = bind_cols(df, preds)
ggplot(data_and_preds, aes(x = data_x)) +
geom_point(aes(y = data_y)) +
geom_line(aes(y = expected, col = "Expected")) +
geom_line(aes(y = fit, col = "Predicted")) +
geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.2, fill = "black")
plot(naive_model, ask = FALSE)
# 1) crear un modelo lineal
naive_model = lm(data_y ~ data_x, data = df)
# 2) obtener estimaciones de a y b
summary(naive_model)
# 3) Obtener predicciones del modelo lineal
preds = predict(naive_model, interval = "confidence")
# 4) visualizar el ajuste
data_and_preds = bind_cols(df, preds)
plot(naive_model, ask = FALSE)
# VALIDACION DEL MODELO:
plot(frog_model, ask = FALSE)
# VALIDACION DEL MODELO:
library("performance")
is_norm = check_normality(frog_model)
is_norm
# OK: residuals appear as normally distributed (p = 0.111).
# Para hacer la inspección visual
plot(is_norm)
plot(is_norm, type = "qq")
plot(is_norm, type = "qq", detrend=TRUE)
# check_normality corre shapiro.test, pero tal y como resalta la documentación
# "this formal test almost always yields significant results for the distribution
# of residuals and visual inspection (e.g. Q-Q plots) are preferable."
is_norm = check_normality(naive_model)
is_norm
# Para hacer la inspección visual
plot(is_norm)
plot(is_norm, type = "qq")
plot(is_norm, type = "qq", detrend=TRUE)
# OK: residuals appear as normally distributed (p = 0.111).
# Para hacer la inspección visual
plot(is_norm)
# Para hacer la inspección visual:
# plot(is_norm)
plot(is_norm, type = "qq")
source("~/.active-rstudio-document", echo=TRUE)
# 2.- crear un modelo lineal
modelo = lm(height ~ sex, heights_earnings)
modelo
# 1.- cargar los datos
library("tidyverse")
# la altura influye en la ganancia?
ggplot(heights_earnings, aes(x = height, col = sex)) + geom_density()
# la altura influye en la ganancia?
ggplot(heights_earnings, aes(x = earn, y = height, col = sex)) + geom_density()
# la altura influye en la ganancia?
ggplot(heights_earnings, aes(x = earn, y = height, col = sex)) + geom_density()
# la altura influye en la ganancia?
ggplot(heights_earnings, aes(x = earn, y = height)) + geom_density()
# la altura influye en la ganancia?
ggplot(heights_earnings, aes(x = earn, y = height)) + geom_point()
# la altura influye en la ganancia?
ggplot(heights_earnings, aes(x = earn, y = height)) + geom_point()
# la altura influye en la ganancia?
ggplot(heights_earnings, aes(x = height, y = earn)) +
geom_point()
# la altura influye en la ganancia?
ggplot(heights_earnings, aes(x = height, y = earn)) +
geom_point()
# la altura influye en la ganancia?
ggplot(heights_earnings, aes(x = height, y = earn)) +
geom_jitter()
# la altura influye en la ganancia?
ggplot(heights_earnings, aes(x = height, y = earn)) +
geom_jitter(alpha = 0.6)  # añade ruido a los datos
# la altura influye en la ganancia?
ggplot(heights_earnings, aes(x = height, y = earn)) +
geom_jitter(alpha = 0.6) +  # añade ruido a los datos, alpha distingue la
geom_smooth()               # conglomeracion de puntos
# 3.- inferecia
summary(modelo)
# 2.- crear un modelo lineal
modelo = lm(earn ~ height, heights_earnings)
# 3.- inferecia
summary(modelo)
# ASUNCIONES:
library("performance")
is_norm = check_normality(earn_model)
# 2.- crear un modelo lineal
# ganancias depende de altura??
# ganancias = a + b * altura --> H0: b = 0
earn_model = lm(earn ~ height, heights_earnings)
is_norm = check_normality(earn_model)
# 3.- inferecia
summary(earn_model)
is_norm
# Warning: Non-normality of residuals detected (p < .001).
plot(is_norm, type = "qq")
plot(is_norm, type = "qq", detrend=TRUE)
# Warning: Non-normality of residuals detected (p < .001).
plot(is_norm, type = "qq")
# no se cumplen las asunciones, los residuos no parecen normales
plot(is_norm, type = "qq", detrend=TRUE)
plot(earn_model)
log()
?log()
# 3.- inferecia
summary(earn_model)
# -----------------------------------------------------------------------------
# hemos podido obviar variables importantes a tener en cuenta --> sexo
ggplot(heights_earnings, aes(x = height, y = earn, col = sex)) +
geom_jitter(alpha = 0.6) +
geom_smooth()
source("~/.active-rstudio-document", echo=TRUE)
ggpairs(df[, c("earn", "height", "age")])
ggpairs(df[c("earn", "height", "age"), ])
ggpairs(df[, c("earn", "height", "age")])
ha_model = lm(earn ~ height + age, df)
# 1.- cargar datos
library(readr)
heights_earnings <- read_csv("data/heights_earnings.csv")
ha_model = lm(earn ~ height + age, heights_earnings)
ha_model
summary(ha_model)
ggpairs(df[, c("earn", "height", "age")])
source("~/.active-rstudio-document", echo=TRUE)
# 1.- cargar los datos:
library(readr)
antrop <- read_csv("data/antrop.csv")
View(antrop)
# Ojo con la columna male! ¿Por qué?
## pq esta codificado con 1s y 0s
antrop$male = as.factor(antrop$male)
antrop$male
antrop_model = lm(weight ~ height + male, data = antrop)
antrop_model
antrop_preds = bind_cols(antrop, fit = predict(antrop_model))
ggplot(antrop_preds, aes(x = height, col=male)) +
geom_point(aes(y = weight)) +
geom_line(aes(y = fit), lwd = 3)
ggplot(antrop_preds, aes(x = height, col=male)) +
geom_point(aes(y = weight)) +
geom_line(aes(y = fit), lwd = 1)
predict(antrop_model)
antrop_preds
summary(antrop_model)
# -----------------------------------------------------------------------------
# Usa intervalos de confianza para interpretar los resultados de la regresión.
confint(antrop_model)
source("~/.active-rstudio-document", echo=TRUE)
data(iris)
iris
# 1.- cargar datos
View(iris)
ggplot(iris, aes(x = Sepal.Length, col = Species)) + geom_density()
# ggplot(iris, aes(x = Sepal.Length, col = Species)) + geom_density()
ggplot(iris, aes(x = Species, y = Sepal.Length)) + geom_boxplot()
# ggplot(iris, aes(x = Sepal.Length, col = Species)) + geom_density()
ggplot(iris, aes(x = Species, y = Sepal.Length)) + geom_voilin()
# ggplot(iris, aes(x = Sepal.Length, col = Species)) + geom_density()
ggplot(iris, aes(x = Species, y = Sepal.Length)) + geom_violin()
# 2.- crear modelo
iris_model = lm(Sepal.Length ~ Species, iris)
iris_model
summary(iris_model)
contrasts(iris_model)
contrasts(iris$Species)
# Contraste: es una pregunta acerca de varias medias
source("utils.R")
# Contraste: es una pregunta acerca de varias medias
source("utils(3).R")
contrasts(iris$Species)
contrasts(iris$Species) = get_contrasts_coding(matriz_cotrastes)
# la matriz de codificaciones es la formula de arriba: los mnº q multiplican
# las variables. mu_setosa = 1, mu_v1 = -1 / 2, mu_v2 = 1 / 2
p1 = c(1, -0.5, 0.5)
# 2.- mu_v1 != mu_v2 --> mu_v1 - mu_v2 != 0
# se hace igual pero con esta ahora: mu_setosa = 0, mu_v1 = 1, mu_v2 = -1
p2 = c(0, -1, 1)
rbind(p1, p2)
matriz_contrastes = rbind(p1, p2)
contrasts(iris$Species) = get_contrasts_coding(matriz_cotrastes)
contrasts(iris$Species) = get_contrasts_coding(matriz_contrastes)
matriz_contrastes = rbind(
"_setosa - V" = p1,
"_V1 - V2" = p2
)
matriz_contrastes
contrasts(iris$Species) = get_contrasts_coding(matriz_contrastes)
get_contrasts_coding(matriz_contrastes)
contrasts(iris$Species)
source("C:/Users/machi/Downloads/CEU/segundo año/primer semestre/estadistica/REPASO FINAL/T5_regresion/sepalos.R", echo=TRUE)
matriz_contrastes
get_contrasts_coding(matriz_contrastes)
matriz_contrastes
# la matriz de codificaciones es la formula de arriba: los mnº q multiplican
# las variables. mu_setosa = 1, mu_v1 = -1 / 2, mu_v2 = -1 / 2
p1 = c(1, -0.5, -0.5)
# 2.- mu_v1 != mu_v2 --> mu_v1 - mu_v2 != 0
# se hace igual pero con esta ahora: mu_setosa = 0, mu_v1 = 1, mu_v2 = -1
p2 = c(0, 1, -1)
matriz_contrastes = rbind(
"_setosa - V" = p1,  # le pones nombre a las filas
"_V1 - V2" = p2
)
contrasts(iris$Species) = get_contrasts_coding(matriz_contrastes)
contrasts(iris$Species)  # --> para comprobar si se han hecho los contrastes
source("C:/Users/machi/Downloads/CEU/segundo año/primer semestre/estadistica/REPASO FINAL/T5_regresion/sepalos.R")
lm(Sepal.Length ~ Species, iris)
v_model = lm(Sepal.Length ~ Species, iris)
summary(v_model)
summary(iris_model)
source("C:/Users/machi/Downloads/CEU/segundo año/primer semestre/estadistica/REPASO FINAL/T5_regresion/sepalos.R", echo=TRUE)
summary(v_model)
confint(v_model)
source("~/.active-rstudio-document", echo=TRUE)
ggplot(heights_earnings, aes(x = height, y = earn)) +
geom_jitter(alpha = 0.6) +
geom_smooth()
ggplot(heights_earnings, aes(x = height, y = earn)) +
geom_jitter(alpha = 0.6) +
# geom_smooth()
ha_model = lm(earn ~ height + age, heights_earnings)
ggplot(heights_earnings, aes(x = height, y = earn)) +
geom_jitter(alpha = 0.6) #+
ggplot(heights_earnings, aes(x = height, y = earn)) +
geom_jitter(alpha = 0.6) # +
# geom_smooth()
ggplot(heights_earnings, aes(x = height, y = earn)) +
geom_jitter(alpha = 0.4) +
geom_smooth()
ggplot(heights_earnings, aes(x = height, y = earn, col = sex)) +
geom_jitter(alpha = 0.4) +
geom_smooth()
ha_model = lm(earn ~ height + age, heights_earnings)
summary(ha_model)
ha_model = lm(earn ~ height + sex, heights_earnings)
summary(ha_model)
source("~/.active-rstudio-document", echo=TRUE)
model = lm(earn ~ height + sex, heights_earnings)
summary(model)
model = lm(earn ~ height + sex, heights_earnings)
summary(model)
heights_earnings
heights_earnings$sex = as.factor(heights_earnings$sex)
model = lm(earn ~ height + sex, heights_earnings)
summary(model)
library(readr)
heights_earnings <- read_csv("data/heights_earnings.csv")
heights_earnings$sex = as.factor(heights_earnings$sex)
ggplot(heights_earnings, aes(x = height, y = earn, col = sex)) +
geom_jitter(alpha = 0.4) +
geom_smooth()
model = lm(earn ~ height + sex, heights_earnings)
summary(model)
ggplot(heights_earnings, aes(x = height, y = earn, col = sex)) +
geom_jitter(alpha = 0.4) +
geom_smooth()
heights_earnings
model = lm(earn ~ height + sex, heights_earnings)
summary(model)
library("performance")
is_norm = check_normality(mmodel)
is_norm = check_normality(model)
is_norm
plot(is_norm, type = "qq")
source("~/.active-rstudio-document", echo=TRUE)
summary(model)
model_2 = lm(log(earn) ~ log(height) + sex + ed, heights_earnings)
summary(model_2)
contrast(heights_earnings$ed)
heights_earnings$ed = as.factor(heights_earnings$ed)
contrast(heights_earnings$ed)
heights_earnings
contrast(heights_earnings$ed)
heights_earnings$ed = as.factor(heights_earnings$ed)
contrast(heights_earnings$ed)
contrasts(heights_earnings$ed)
matriz_conrastes = rbind(
"_elem-other" = c(1, 0.5, -0.5),
"_hs-uni" = c(0, 1, -1)
)
contrasts(heights_earnings$ed) = get_contrasts_coding(heights_earnings$ed)
contrasts(heights_earnings$ed) = get_contrasts_coding(matriz_conrastes)
get_contrasts_coding(matriz_conrastes)
contrasts(heights_earnings$ed)
contrasts(iris$Species)
contrasts(heights_earnings$ed) = get_contrasts_coding(matriz_contrastes)
matriz_contrastes = rbind(
"_elem-other" = c(1, 0.5, -0.5),
"_hs-uni" = c(0, 1, -1)
)
contrasts(heights_earnings$ed) = get_contrasts_coding(matriz_contrastes)
get_contrasts_coding(matriz_contrastes)
contrasts(heights_earnings$ed)
model_2 = lm(log(earn) ~ log(height) + sex + ed, heights_earnings)
summary(model_2)
matriz_contrastes = rbind(
"_elem-other" = c(1, -0.5, -0.5),
"_hs-uni" = c(0, 1, -1)
)
contrasts(heights_earnings$ed) = get_contrasts_coding(matriz_contrastes)
model_2 = lm(log(earn) ~ log(height) + sex + ed, heights_earnings)
summary(model_2)
matriz_contrastes
source("C:/Users/machi/Downloads/CEU/segundo año/primer semestre/estadistica/REPASO FINAL/T5_regresion/altura_sexo_earn.R", echo=TRUE)
install.packages(
c("afex", "emmeans")
)
source("~/.active-rstudio-document", echo=TRUE)
source("utils(3).R")
library("car")
# ggplot(iris, aes(x = Sepal.Length, col = Species)) + geom_density()
ggplot(iris, aes(x = Species, y = Sepal.Length)) + geom_boxplot()
source("C:/Users/machi/Downloads/CEU/segundo año/primer semestre/estadistica/REPASO FINAL/T5_regresion/sepalos.R", echo=TRUE)
v_model_aov = Anova(v_model, type = 3)
v_model_aov
effectsize(v_model_aov)
pairwise.t.test(iris$Sepal.Length, iris$Species, p.adjust.method = "bonferroni")
library("emmeans")
summary(v_model)
v_model_aov
# ------------------------------------------------------------------------------
# 1.- visualizar
# iris$Sepal.Length, iris$Species
ggplot(iris, aes(x = Sepal.Length, y = Species, col = Species)) + geom_boxplot()
# ------------------------------------------------------------------------------
# 1.- visualizar
# iris$Sepal.Length, iris$Species
ggplot(iris, aes(x = Sepal.Length, y = Species, fill = Species)) + geom_boxplot()
contrasts(iris$Species)
matriz_contrastes = rbind(
"_setosa-V" = c(1, -0.5, -0.5),
"_V1-V2" = c(0, 1, -1)
)
contrasts(iris$Species) = get_contrasts_coding(matriz_contrastes)
contrasts(iris$Species)
lm(Sepal.Length ~ Species, iris)
model = lm(Sepal.Length ~ Species, iris)
model_aov = Anova(model)
model_aov
model_aov = Anova(model, type = 3)
model_aov
summary(model)
# si queremos todas la comparaciones:
model_aov
pairwise.t.test(iris$Sepal.Length, iris$Species, p.adjust.method = "bonferroni")
plot(v_model, which = c(1, 2), ask = FALSE)
# 5.- ASUNCIONES DE ANOVA (las mismas q la de la regresion)
is_norm = check_normality(v_model)
plot(is_norm, type = "qq")
# .2.- homogeneidad de la varianza
check_homogeneity(v_model)
options(contrasts = c("contr.sum", "contr.poly"))
source("~/.active-rstudio-document", echo=TRUE)
library(readr)
anxiety <- read_csv("data/anxiety.csv")
View(anxiety)
contrasts(anxiety$group)
anxiety$group = as.factor(anxiety$group)
contrasts(anxiety$group)
ggplot(anxiety, aes(x = group, y = anxiety)) + geom_boxplot()
ggplot(anxiety, aes(x = group, y = posttest - pretest)) + geom_boxplot()
lm(posttest - pretest ~ group, anxiety)
ggplot(anxiety, aes(x = posttest, y = pretest, col = group)) + geom_point()
ggplot(anxiety, aes(x = posttest, y = pretest, col = group)) +
geom_point() +
geom_smooth()
source("~/.active-rstudio-document", echo=TRUE)
anxiety_lm = lm(posttest - pretest ~ group, anxiety)
summary(anxiety_lm)
# 3) Anova + asunciones
# anxiety_lm = lm(posttest - pretest ~ group, anxiety) # --> otra forma
anxiety_lm = lm(posttest ~ pretest + group, anxiety)
anxiety_lm
summary(anxiety_lm)
anxiety_lm
contrasts(anxiety$group)
anxiety_aov = Anova(anxiety_lm, type = 3)
anxiety_aov
emmeans(anxiety_lm)
emmeans(anxiety_lm, "group")
group_means = emmeans(anxiety_lm, "group")  # --> saca las medias eiIC
pairs(group_means)
?pairs
pairs(group_means, "bonferroni")
pairs(group_means, adjust "fdr")
pairs(group_means, adjust = "fdr")
pairs(group_means, adjust = "tukey")
source("~/.active-rstudio-document", echo=TRUE)
drugs_df_1
drugs_1$drug = factor(drugs_1$drug)
drugs_1$sex = factor(drugs_1$sex)
ggplot(drugs_1, aes(x = drug, y = response_time, col = sex)) + geom_point()
ggplot(drugs_1, aes(x = drug, y = response_time, col = sex)) +
geom_point() +
geom_smooth()
ggplot(drugs_1, aes(x = drug, y = response_time, col = sex)) +
# geom_point()
geom_boxplot()
ggplot(drugs_1, aes(x = drug, y = response_time, col = sex)) +
# geom_point()
stat_summary()
ggplot(drugs_1, aes(x = drug, y = response_time, col = sex)) +
# geom_point()
stat_summary() +
stat_summary(geom = "line", aes(group = sex))
model_d1 = lm(response_time ~ sex + drug, data = drugs_1)
drugs_1$predictions = predict(model_d1)
ggplot(drugs_1, aes(x = sex, y = predictions, col = drug)) +
stat_summary() +
stat_summary(geom='line', aes(group = drug))
# ------------------------------------------------------------------------------
# USANDO OTRO FICHERO
drugs_2 = read.csv("data/drugs_2.csv")
drugs_2 = mutate(drugs_2, drug = factor(drug), sex = factor(sex))
# interaction.plot(drugs_df$sex, drugs_df$drug, response = drugs_df$response_time)
ggplot(drugs_df_2, aes(x = sex, y = response_time, col = drug)) +
stat_summary() +
stat_summary(geom = 'line', aes(group = drug))
# interaction.plot(drugs_df$sex, drugs_df$drug, response = drugs_df$response_time)
ggplot(drugs_2, aes(x = sex, y = response_time, col = drug)) +
stat_summary() +
stat_summary(geom = 'line', aes(group = drug))
model_d2 = lm(response_time ~ sex + drug, data = drugs_2)
drugs_2$predictions = predict(model_d2)
ggplot(drugs_2, aes(x = sex, y = predictions, col = drug)) +
stat_summary() +
stat_summary(geom = 'line', aes(group = drug))
model_d2 = lm(response_time ~ sex + drug, data = drugs_2)
drugs_2$predictions = predict(model_d2)
ggplot(drugs_2, aes(x = sex, y = predictions, col = drug)) +
stat_summary() +
stat_summary(geom = 'line', aes(group = drug))
?ancova
lm(response_time ~ sex + drug, drugs_2)
model_d2 = lm(response_time ~ sex + drug, drugs_2)
summary(model_d2)
source("C:/Users/machi/Downloads/CEU/segundo año/primer semestre/estadistica/REPASO FINAL/T5_regresion/drogas.R", echo=TRUE)
View(drugs_2)
drugs_2$response_time = as.factor(drugs_2$response_time)
model_d2 = lm(response_time ~ sex + drug, drugs_2)
summary(model_d2)
model_d2 = lm(response_time ~ sex + drug, drugs_2)
summary(model_d2)
drugs_2$response_time = as.numeric(drugs_2$response_time)
model_d2 = lm(response_time ~ sex + drug, drugs_2)
summary(model_d2)
model_d2 = lm(response_time ~ sex + drug, drugs_2)
summary(model_d2)
source("C:/Users/machi/Downloads/CEU/segundo año/primer semestre/estadistica/REPASO FINAL/T5_regresion/drogas.R", echo=TRUE)
model_d2 = lm(response_time ~ sex + drug + sex:drug, drugs_2)
summary(model_d2)
View(drugs_2)
drugs_2$preds = predict(model_d2)
ggplot(drugs_2, aes(x = sex, y = response_time, col = drug)) +
stat_summary()
ggplot(drugs_2, aes(x = sex, y = preds, col = drug)) +
stat_summary()
ggplot(drugs_2, aes(x = sex, y = response_time, col = drug)) +
stat_summary() +
stat_summary(geom = "line", aes(group = drug))
ggplot(drugs_2, aes(x = sex, y = response_time, col = drug)) +
stat_summary() +
stat_summary(geom = "line", aes(group = drug))
ggplot(drugs_2, aes(x = sex, y = preds, col = drug)) +
stat_summary() +
stat_summary(geom = "line", aes(group = drug))
source("C:/Users/machi/Downloads/CEU/segundo año/primer semestre/estadistica/REPASO FINAL/T5_regresion/drogas.R", echo=TRUE)
# ------------------------------------------------------------------------------
drug_means = emmeans(drugs_model_2, ~ drug)
# ------------------------------------------------------------------------------
drug_means = emmeans(model_d2, ~ drug)
drug_means
contrast(drug_means, method = list("drugs" = drugs_contrasts))
drugs_contrasts = list(
"_Drugs-Placebo" = c(1, 1, -2),
"_A - B" = c(1, -1, 0)
)
contrast(drug_means, method = list("drugs" = drugs_contrasts))
# Contrastes para interacciones
conditional_means = emmeans(model_d2, ~ drug | sex)
conditional_means
contrast(conditional_means,
interaction = list("drugs" = drugs_contrasts, "sex" = "consec"),
by=NULL)
contrast(conditional_means,
interaction = list(drug = "pairwise", sex = "consec"),
by=NULL, adjust = "fdr")
